{"version":3,"sources":["constants.js","components/Error.js","components/EnsAddress.js","components/Versions.js","components/Details.js","components/MetamaskNotInstalled.js","App.js","reportWebVitals.js","index.js"],"names":["KNOWN_ADDRESSES","name","domain","type","KNOWN_NETWORKS","Map","ensRegistry","Error","message","style","color","overflowWrap","display","EnsAddress","error","address","networkType","shorten","entity","Versions","repo","provider","network","useState","versions","setVersions","a","APM","ensRegistryAddress","apm","appId","utils","namehash","getAllVersions","versionList","reverse","getVersions","length","Box","map","item","mode","version","content","value","location","contractAddress","styled","div","Details","apps","app","index","label","items","MetamaskNotInstalled","alignItems","justifyContent","height","alignSelf","illustration","width","src","alt","text","getDomainOwner","eth","ens","registry","getOwner","App","setProvider","setDomain","result","setResult","owner","setOwner","knownAddresses","setKnownAddresses","setNetwork","useEffect","window","ethereum","cancel","handleChainChanged","chainId","console","log","reload","web3","Web3","getChainId","id","connectedNetwork","get","registryAddress","on","fetchNetwork","removeListener","fetchKnownAddresses","Promise","all","ensResolve","currentProvider","addresses","fetchDomainData","domainOwner","handleChange","useCallback","val","primary","secondary","wide","onChange","heading","filter","m","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.282fdf07.chunk.js","sourcesContent":["export const KNOWN_ADDRESSES = [\n  { name: 'Agent', domain: 'agent.aragonpm.eth', type: 'app' },\n  { name: 'Finance', domain: 'finance.aragonpm.eth', type: 'app' },\n  { name: 'Survey', domain: 'survey.aragonpm.eth', type: 'app' },\n  { name: 'Token Manager', domain: 'token-manager.aragonpm.eth', type: 'app' },\n  { name: 'Vault', domain: 'vault.aragonpm.eth', type: 'app' },\n  { name: 'Voting', domain: 'voting.aragonpm.eth', type: 'app' },\n\n  {\n    domain: 'dandelion-voting.aragonpm.eth',\n    name: 'Dandelion Voting',\n    type: 'app',\n  },\n  { domain: 'time-lock.aragonpm.eth', name: 'Time Lock', type: 'app' },\n  {\n    domain: 'token-balance-oracle.aragonpm.eth',\n    name: 'Token Oracle',\n    type: 'app',\n  },\n  { domain: 'token-request.aragonpm.eth', name: 'Token Request', type: 'app' },\n\n  { domain: 'redemptions.aragonpm.eth', name: 'Redemptions', type: 'app' },\n  { domain: 'address-book.aragonpm.eth', name: 'Address Book', type: 'app' },\n  { domain: 'allocations.aragonpm.eth', name: 'Allocations', type: 'app' },\n  { domain: 'discussions.aragonpm.eth', name: 'Discussions', type: 'app' },\n  { domain: 'dot-voting.aragonpm.eth', name: 'Dot Voting', type: 'app' },\n  { domain: 'projects.aragonpm.eth', name: 'Projects', type: 'app' },\n  { domain: 'rewards.aragonpm.eth', name: 'Rewards', type: 'app' },\n\n  {\n    name: 'Company',\n    domain: 'company-template.aragonpm.eth',\n    type: 'template',\n  },\n  {\n    name: 'Membership',\n    domain: 'membership-template.aragonpm.eth',\n    type: 'template',\n  },\n  {\n    name: 'Reputation',\n    domain: 'reputation-template.aragonpm.eth',\n    type: 'template',\n  },\n  {\n    name: 'Dandelion',\n    domain: 'dandelion-org-template.aragonpm.eth',\n    type: 'template',\n  },\n  {\n    name: 'Open Enterprise',\n    domain: 'open-enterprise-template.aragonpm.eth',\n    type: 'template',\n  },\n  {\n    name: 'Fundraising',\n    domain: 'aragon-fundraising.aragonpm.eth',\n    type: 'template',\n  },\n]\n\nexport const KNOWN_NETWORKS = new Map([\n  [\n    1,\n    {\n      ensRegistry: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n      name: 'Ethereum Mainnet',\n      type: 'main',\n    },\n  ],\n  [\n    4,\n    {\n      ensRegistry: '0x98df287b6c145399aaa709692c8d308357bc085d',\n      name: 'Ethereum Rinkeby Testnet',\n      type: 'rinkeby',\n    },\n  ],\n  [\n    137,\n    {\n      ensRegistry: '0x3c70a0190d09f34519e6e218364451add21b7d4b',\n      name: 'Polygon Mainnet',\n      type: 'matic',\n    },\n  ],\n  [\n    80001,\n    {\n      ensRegistry: '0x431f0eed904590b176f9ff8c36a1c4ff0ee9b982',\n      name: 'Polygon Mumbai Testnet',\n      type: 'mumbai',\n    },\n  ],\n  [\n    421611,\n    {\n      ensRegistry: '0x206edd024d8ac4df5e8953619ea8355b91248af1',\n      name: 'Arbitrum Testnet',\n      type: 'rinkarby',\n    },\n  ],\n])\n","export function Error({ message }) {\n  return (\n    <div style={{ color: 'red', overflowWrap: 'anywhere', display: 'inline' }}>\n      {message}\n    </div>\n  )\n}\n","import { IdentityBadge } from '@aragon/ui'\nimport { Error } from './Error'\n\nexport function EnsAddress({ error, address, networkType }) {\n  return (\n    <>\n      {error ? (\n        <Error message={error} />\n      ) : (\n        <IdentityBadge\n          shorten={false}\n          entity={address}\n          networkType={networkType}\n        />\n      )}\n    </>\n  )\n}\n","import { useState } from 'react'\nimport APM from '@aragon/apm'\nimport { utils } from 'ethers'\nimport { Tag, TextCopy } from '@aragon/ui'\nimport { EnsAddress } from './EnsAddress'\nimport styled from 'styled-components'\n\nexport function Versions({ repo, provider, network }) {\n  const [versions, setVersions] = useState(null)\n\n  useState(() => {\n    async function getVersions() {\n      const apm = await APM(provider, {\n        ensRegistryAddress: network.ensRegistry,\n      })\n\n      const appId = utils.namehash(repo.domain)\n      try {\n        const versionList = await apm.getAllVersions(appId)\n        setVersions(versionList.reverse())\n      } catch (_) {\n        setVersions([])\n      }\n    }\n\n    getVersions()\n  }, [repo, network])\n\n  if (!versions) {\n    return null\n  }\n\n  if (versions.length === 0) {\n    return <Box>No versions</Box>\n  }\n\n  return (\n    <div>\n      {versions.map((item) => (\n        <Box key={item.version}>\n          <Tag mode=\"new\">{item.version}</Tag>\n          <div>\n            {item.content.provider}:\n            <TextCopy value={item.content.location}></TextCopy>\n          </div>\n          <EnsAddress\n            address={item.contractAddress}\n            networkType={network.type}\n          ></EnsAddress>\n        </Box>\n      ))}\n    </div>\n  )\n}\n\nconst Box = styled.div`\n  padding: 24px;\n`\n","import { Field } from '@aragon/ui'\nimport { Accordion } from '@aragon/ui'\nimport { EnsAddress } from './EnsAddress'\nimport { Versions } from './Versions'\n\nexport function Details({ apps, network, provider }) {\n  return (\n    <ol>\n      {apps.map((app, index) => {\n        return (\n          <li key={index}>\n            <Field label={app.name}>\n              <Accordion\n                items={[\n                  [\n                    <div>\n                      {app.domain} ({' '}\n                      <EnsAddress\n                        error={app.error}\n                        address={app.address}\n                        networkType={network.type}\n                      />\n                      )\n                    </div>,\n                    <Versions\n                      repo={app}\n                      network={network}\n                      provider={provider}\n                    />,\n                  ],\n                ]}\n              />\n            </Field>\n          </li>\n        )\n      })}\n    </ol>\n  )\n}\n","import { EmptyStateCard } from '@aragon/ui'\n\nexport function MetamaskNotInstalled() {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        height: '100vh',\n      }}\n    >\n      <div style={{ alignSelf: 'center' }}>\n        <EmptyStateCard\n          illustration={\n            <img\n              width=\"200px\"\n              src={`/aragon-ens-lookup/aragon-ui/48526b4ed811c6ff.png`}\n              alt=\"metamask not found\"\n            />\n          }\n          text=\"Opps! Metamask is not installed!\"\n        ></EmptyStateCard>\n      </div>\n    </div>\n  )\n}\n","import { ensResolve } from '@aragon/wrapper'\nimport { useCallback, useEffect, useState } from 'react'\nimport { Box, Header, Main, Field, SearchInput } from '@aragon/ui'\nimport { KNOWN_ADDRESSES, KNOWN_NETWORKS } from './constants'\nimport Web3 from 'web3'\nimport { Details } from './components/Details'\nimport { EnsAddress } from './components/EnsAddress'\nimport { MetamaskNotInstalled } from './components/MetamaskNotInstalled'\n\nasync function getDomainOwner(provider, domain) {\n  return provider.eth.ens.registry.getOwner(domain)\n}\n\nfunction App() {\n  const [provider, setProvider] = useState(null)\n  const [domain, setDomain] = useState('aragonpm.eth')\n  const [result, setResult] = useState({})\n  const [owner, setOwner] = useState({})\n  const [knownAddresses, setKnownAddresses] = useState([])\n  const [network, setNetwork] = useState({})\n\n  useEffect(() => {\n    if (window.ethereum) {\n      let cancel = false\n      function handleChainChanged(chainId) {\n        console.log('chainChanged', chainId)\n        window.location.reload()\n      }\n\n      async function fetchNetwork() {\n        const web3 = new Web3(window.ethereum)\n        try {\n          const id = await web3.eth.getChainId()\n          if (!cancel) {\n            const connectedNetwork = KNOWN_NETWORKS.get(id)\n            if (connectedNetwork) {\n              web3.eth.ens.registryAddress = connectedNetwork.ensRegistry\n            }\n            setProvider(web3)\n            setNetwork(connectedNetwork || {})\n          }\n        } catch (err) {}\n      }\n\n      window.ethereum.on('chainChanged', handleChainChanged)\n      fetchNetwork()\n\n      return () => {\n        cancel = true\n        if (window.ethereum.removeListener) {\n          window.ethereum.removeListener('chainChanged', handleChainChanged)\n        }\n      }\n    }\n  }, [])\n\n  useEffect(() => {\n    let cancel = false\n\n    if (!provider || !network.ensRegistry) return\n\n    async function fetchKnownAddresses() {\n      const addresses = await Promise.all(\n        KNOWN_ADDRESSES.map(async (app) => {\n          let address\n          let error\n          try {\n            address = await ensResolve(app.domain, {\n              provider: provider.currentProvider,\n              registryAddress: network.ensRegistry,\n            })\n          } catch (e) {\n            error = e.message\n          }\n\n          return { ...app, address, error }\n        })\n      )\n\n      if (!cancel) {\n        setKnownAddresses(addresses)\n      }\n    }\n\n    fetchKnownAddresses()\n\n    return () => {\n      cancel = true\n    }\n  }, [provider, network])\n\n  useEffect(() => {\n    let cancel = false\n    if (!provider || !domain || !network.ensRegistry) return\n\n    async function fetchDomainData() {\n      try {\n        const address = await ensResolve(domain, {\n          provider: provider.currentProvider,\n          registryAddress: network.ensRegistry,\n        })\n\n        if (!cancel) {\n          setResult({ address })\n        }\n      } catch (error) {\n        if (!cancel) setResult({ error: error.message })\n      }\n\n      try {\n        const domainOwner = await getDomainOwner(provider, domain)\n        if (!cancel) {\n          setOwner({ address: domainOwner })\n        }\n      } catch (err) {\n        if (!cancel) setOwner({ error: err.message })\n      }\n    }\n\n    fetchDomainData()\n\n    return () => {\n      cancel = true\n    }\n  }, [domain, provider, network])\n\n  const handleChange = useCallback((val) => {\n    console.log('value', val)\n    setDomain(val)\n  }, [])\n\n  if (!provider) {\n    return <MetamaskNotInstalled />\n  }\n\n  return (\n    <Main>\n      <Header\n        primary=\"Aragon ENS\"\n        secondary={network.name || 'Unsupported network'}\n      />\n      <Box>\n        <Field label=\"Lookup ENS name\">\n          <SearchInput wide value={domain} onChange={handleChange} />\n        </Field>\n\n        <div>\n          <Field label=\"address\">\n            <EnsAddress\n              error={result.error}\n              address={result.address}\n              networkType={network.type}\n            />\n          </Field>\n          <Field label=\"owner\">\n            <EnsAddress\n              error={owner.error}\n              address={owner.address}\n              networkType={network.type}\n            />\n          </Field>\n        </div>\n      </Box>\n      <Box heading=\"Known Apps:\">\n        <Details\n          apps={knownAddresses.filter((m) => m.type === 'app')}\n          network={network}\n          provider={provider}\n        />\n      </Box>\n      <Box heading=\"Known Templates:\">\n        <Details\n          apps={knownAddresses.filter((m) => m.type === 'template')}\n          network={network}\n          provider={provider}\n        />\n      </Box>\n    </Main>\n  )\n}\n\nexport default App\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}